#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

// Function to merge two sorted linked lists
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    // Initialize a dummy node for the merged list
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummy->next = NULL;
    struct ListNode* merged = dummy;

    // Traverse both lists until one of them becomes empty
    while (list1 && list2) {
        if (list1->val <= list2->val) {
            merged->next = list1;
            list1 = list1->next;
        } else {
            merged->next = list2;
            list2 = list2->next;
        }
        merged = merged->next;
    }

    // Append the remaining nodes of the non-empty list
    merged->next = list1 ? list1 : list2;

    // Return the head of the merged list (excluding the dummy node)
    return dummy->next;
}

// Function to print the linked list
void printList(struct ListNode* head) {
    while (head) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

// Function to delete the linked list
void deleteList(struct ListNode* head) {
    while (head) {
        struct ListNode* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    // Creating the first sorted linked list: 1 -> 3 -> 5
    struct ListNode* list1 = (struct ListNode*)malloc(sizeof(struct ListNode));
    list1->val = 1;
    list1->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    list1->next->val = 3;
    list1->next->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    list1->next->next->val = 5;
    list1->next->next->next = NULL;

    // Creating the second sorted linked list: 2 -> 4 -> 6
    struct ListNode* list2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    list2->val = 2;
    list2->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    list2->next->val = 4;
    list2->next->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    list2->next->next->val = 6;
    list2->next->next->next = NULL;

    // Merging the two lists
    struct ListNode* mergedList = mergeTwoLists(list1, list2);

    // Printing the merged list
    printf("Merged List: ");
    printList(mergedList);

    // Freeing memory
    deleteList(mergedList);

    return 0;
}
